// --- Auto Generated By CodeGen Module ---
package com.hp.codegen.test.domain.service.impl;

import cn.hutool.core.collection.CollUtil;
import com.hp.codegen.test.api.order.request.TestOrderPageRequest;
import com.hp.codegen.test.api.order.response.TestOrderPageResponse;
import com.hp.codegen.test.domain.TestOrder;
import com.hp.codegen.test.domain.command.CreateTestOrderCommand;
import com.hp.codegen.test.domain.command.UpdateTestOrderCommand;
import com.hp.codegen.test.domain.context.CreateTestOrderContext;
import com.hp.codegen.test.domain.context.UpdateTestOrderContext;
import com.hp.codegen.test.domain.events.TestOrderEvents;
import com.hp.codegen.test.domain.mapper.TestOrderMapper;
import com.hp.codegen.test.domain.repository.TestOrderRepository;
import com.hp.codegen.test.domain.service.ITestOrderService;
import com.hp.common.base.enums.CodeEnum;
import com.hp.common.base.exception.BusinessException;
import com.hp.common.base.model.PageRequestWrapper;
import com.hp.common.base.model.PageResponse;
import com.hp.jpa.EntityOperations;
import com.querydsl.core.BooleanBuilder;
import java.lang.Long;
import java.lang.Override;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author hp
 */
@Slf4j
@Service
@RequiredArgsConstructor
@Transactional(
        rollbackFor = Exception.class
)
public class TestOrderServiceImpl implements ITestOrderService {
    private final TestOrderRepository testOrderRepository;

    private final ApplicationEventPublisher eventPublisher;

    @Override
    public Long createTestOrder(CreateTestOrderCommand command) {
        final CreateTestOrderContext context = CreateTestOrderContext.create(command);
        return EntityOperations.doCreate(testOrderRepository)
        .create(() -> TestOrder.createTestOrder(context))
        .update(entity -> {})
        .successHook(entity -> eventPublisher.publishEvent(new TestOrderEvents.TestOrderCreatedEvent(context)))
        .execute()
        .map(TestOrder::getId)
        .orElseThrow(() -> new BusinessException(CodeEnum.SaveError));
    }

    @Override
    public void updateTestOrder(UpdateTestOrderCommand command) {
        final UpdateTestOrderContext context = UpdateTestOrderContext.create(command);EntityOperations.doUpdate(testOrderRepository)
        .loadById(command.getId())
        .update(entity -> entity.updateTestOrder(context))
        .successHook(entity -> eventPublisher.publishEvent(new TestOrderEvents.TestOrderUpdatedEvent(context)))
        .execute();
    }

    @Override
    public void enableTestOrder(Long id) {
        EntityOperations.doUpdate(testOrderRepository)
        .loadById(id)
        .update(TestOrder::enable)
        .execute();
    }

    @Override
    public void disableTestOrder(Long id) {
        EntityOperations.doUpdate(testOrderRepository)
        .loadById(id)
        .update(TestOrder::disable)
        .execute();
    }

    @Override
    public TestOrder findById(Long id) {
        return testOrderRepository.findById(id).orElseThrow(() -> new BusinessException(CodeEnum.NotFindError));
    }

    @Override
    public List<TestOrder> findAllById(Collection<Long> ids) {
        if (CollUtil.isEmpty(ids)) { 
           return Collections.emptyList();
        }
        final List<TestOrder> list =  testOrderRepository.findAllById(ids);
        if (CollUtil.isEmpty(list)) { 
           return Collections.emptyList();
        }
        return list;
    }

    @Override
    public PageResponse<TestOrderPageResponse> findByPage(
            PageRequestWrapper<TestOrderPageRequest> requestWrapper) {
        final BooleanBuilder booleanBuilder = new BooleanBuilder();
        final Page<TestOrder> page = testOrderRepository.findAll(booleanBuilder, PageRequest.of(requestWrapper.getPage() - 1, requestWrapper.getSize(), Sort.by(Sort.Direction.DESC, "id")));
        return PageResponse.of(
        page.getContent()
           .stream()
           .map(TestOrderMapper.INSTANCE::entityToCustomPageResponse)
           .collect(Collectors.toList()),
        page.getTotalElements(),
        requestWrapper 
        );
    }
}
