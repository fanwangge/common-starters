// --- Auto Generated By CodeGen Module ---
package com.luban.codegen.test.controller;

import com.luban.codegen.test.api.order.request.TestOrderCreateRequest;
import com.luban.codegen.test.api.order.request.TestOrderPageRequest;
import com.luban.codegen.test.api.order.request.TestOrderUpdateRequest;
import com.luban.codegen.test.api.order.response.TestOrderPageResponse;
import com.luban.codegen.test.api.order.response.TestOrderResponse;
import com.luban.codegen.test.domain.TestOrder;
import com.luban.codegen.test.domain.command.CreateTestOrderCommand;
import com.luban.codegen.test.domain.command.UpdateTestOrderCommand;
import com.luban.codegen.test.domain.mapper.TestOrderMapper;
import com.luban.codegen.test.domain.service.ITestOrderService;
import com.luban.common.base.model.PageRequestWrapper;
import com.luban.common.base.model.PageResponse;
import com.luban.common.base.model.Returns;
import java.lang.Long;
import java.lang.Void;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author hp
 */
@Slf4j
@RestController
@RequestMapping("testOrder/v1")
@RequiredArgsConstructor
public class TestOrderController {
    private final ITestOrderService testOrderService;

    @PostMapping("create")
    public Returns<Long> createTestOrder(@RequestBody TestOrderCreateRequest request) {
        final CreateTestOrderCommand command = TestOrderMapper.INSTANCE.requestToCreateCommand(request);
        return Returns.success(testOrderService.createTestOrder(command));
    }

    @PostMapping("update")
    public Returns<Void> updateTestOrder(@RequestBody TestOrderUpdateRequest request) {
        final UpdateTestOrderCommand command = TestOrderMapper.INSTANCE.requestToUpdateCommand(request);
        testOrderService.updateTestOrder(command);
        return Returns.success();
    }

    @PostMapping("enable/{id}")
    public Returns<Void> enableTestOrder(@PathVariable Long id) {
        testOrderService.enableTestOrder(id);
        return Returns.success();
    }

    @PostMapping("disable/{id}")
    public Returns<Void> disableTestOrder(@PathVariable Long id) {
        testOrderService.disableTestOrder(id);
        return Returns.success();
    }

    @GetMapping("findById/{id}")
    public Returns<TestOrderResponse> findById(@PathVariable Long id) {
        TestOrder entity = testOrderService.findById(id);
        TestOrderResponse response = TestOrderMapper.INSTANCE.entityToCustomResponse(entity);
        return Returns.success(response);
    }

    @PostMapping("findByPage")
    public Returns<PageResponse<TestOrderPageResponse>> findByPage(
            @RequestBody PageRequestWrapper<TestOrderPageRequest> requestWrapper) {
        return Returns.success(testOrderService.findByPage(requestWrapper));
    }
}
