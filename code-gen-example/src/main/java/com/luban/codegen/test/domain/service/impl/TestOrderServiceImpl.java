// --- Auto Generated By CodeGen Module ---
package com.luban.codegen.test.domain.service.impl;

import cn.hutool.core.collection.CollUtil;
import com.luban.codegen.test.domain.TestOrder;
import com.luban.codegen.test.domain.repository.TestOrderRepository;
import com.luban.codegen.test.domain.service.ITestOrderService;
import com.luban.common.base.enums.CodeEnum;
import com.luban.common.base.exception.BusinessException;
import com.luban.jpa.EntityOperations;
import java.lang.Long;
import java.lang.Override;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author hp
 */
@Slf4j
@Service
@RequiredArgsConstructor
@Transactional(
    rollbackFor = Exception.class
)
public class TestOrderServiceImpl implements ITestOrderService {
  private final TestOrderRepository testOrderRepository;

  private final ApplicationEventPublisher eventPublisher;

  @Override
  public void enableTestOrder(Long id) {
    EntityOperations.doUpdate(testOrderRepository)
    .loadById(id)
    .update(TestOrder::valid)
    .execute();
  }

  @Override
  public void disableTestOrder(Long id) {
    EntityOperations.doUpdate(testOrderRepository)
    .loadById(id)
    .update(TestOrder::invalid)
    .execute();
  }

  @Override
  public TestOrder findById(Long id) {
    return testOrderRepository.findById(id).orElseThrow(() -> new BusinessException(CodeEnum.NotFindError));
  }

  @Override
  public List<TestOrder> findAllById(Collection<Long> ids) {
    if (CollUtil.isEmpty(ids)) { 
       return Collections.emptyList();
    }
    final List<TestOrder> list =  testOrderRepository.findAllById(ids);
    if (CollUtil.isEmpty(list)) { 
       return Collections.emptyList();
    }
    return list;
  }
}
